#linked list

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None

    def set_data(self,data):
        self.data=data

    def set_next(self,next):
        self.next=next

    def get_data(self):
        return self.data

    def get_next(self):
        return self.next

class LinkedList:
    def __init__(self):
        self.head=None
        self.tail=None

    def get_head(self):
        return self.head

    def get_tail(self):
        return self.tail

    def insert_at_end(self,data):
        new_node=Node(data)    #create new node
        if self.head is None:   #if empty
            self.head=self.tail=new_node    #set new node as head and tail
            return "element added successfully:"+str(self.tail.get_data())
        else:   #if not empty
            self.tail.set_next(new_node) #set tail next to new node
            self.tail=new_node     #set new node as tail
            return "element added successfully:"+str(self.tail.get_data())

    def insert_in_between(self,data,data_before):
        new_node=Node(data)
        if data_before==None:    #if data before is empty
            new_node.set_next(self.head)     #set head as next node to new node
            self.head=new_node     #make new node as head
            if new_node.get_next()==None:    #check if next wasn't empty
                self.tail=new_node        #if empty then make new node as tail node
        else:    #if data before is specified
            node_before=self.find_node(data_before)    #find data before node
            if node_before is not None:   #found and is not empty
                new_node.set_next(node_before.get_next()) #set next of new node to the next of node before
                node_before.set_next(new_node)   #set the next of node before to the new node
            else:
                print(data_before," is no present in linked list")

    def insert_at_beginning(self,data):
        new_node=Node(data)
        new_node.set_next(self.head)
        self.head=new_node    #making the new node as head node
        return "data inserted"
