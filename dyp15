'''
Given a stack of integers, write a python program that 
updates the input stack such that all occurrences of the smallest values are at the bottom of the stack, 
while the order of the other elements remains the same.

For example:
Input stack (top-bottom) :   5 66  5  8  7
Output:  66  8  7  5  5
'''


class Stack:
    def __init__(self,max_size):
        self.__max_size=max_size
        self.__elements=[None]*max_size
        self.__top=-1

    def get_max_size(self):
        return self.__max_size

    def is_full(self):
        if (self.__top==self.__max_size-1):
            return True
        else:
            return False

    def push(self,data):
        if self.is_full():
            print("Overflow")
        else:
            self.__top+=1
            self.__elements[self.__top]=data

    def is_empty(self):
        if (self.__top==-1):
            return True
        else:
            return False

    def pop(self):
        if self.is_empty():
            print("Underflow")
        else:
            data=self.__elements[self.__top]
            self.__top-=1
            return data

    def display(self):
        if self.is_empty():
            print("the stack is empty")
        else:
            index=self.__top
            while(index>=0):
                print(self.__elements[index])
                index-=1

def smallest_value(number_stack):
    l=[]
    while(not number_stack.is_empty()):
        l.append(number_stack.pop())
    minimum=min(l)
    counter=l.count(min(l))
    for i in range(counter):
        number_stack.push(minimum)
    for element in l[::-1]:
        if element!=minimum:
            number_stack.push(element)
    return number_stack

number_stack=Stack(5)
number_stack.push(7)
number_stack.push(8)
number_stack.push(5)
number_stack.push(66)
number_stack.push(5)
print("initial stack:")
number_stack.display()
smallest_value(number_stack)
print("after the change")
number_stack.display()

â€¢	Queue : 
A queue is also a linear data structure which is based on the principle of First-In-First-Out (FIFO) where the data entered first will be accessed first.

#basic code
class Queue:
    def __init__(self,max_size):
        self.__max_size=max_size
        self.__elements=[None]*max_size
        self.__rear=-1
        self.__front=0

    def get_max_size(self):
        return self.__max_size

    def full(self):
        if self.__rear==self.__max_size-1:
            return True
        else:
            return False

    def enqueue(self,data):
        if (self.full()):
            print("overflow")
        else:
           self.__rear+=1
           self.__elements[self.__rear]=data 
        
    def empty(self):
        if self.__front>self.__rear:
            return True
        else:
            return False

    def dequeue(self):
        if self.empty():
            print("Underflow")
        else:
            data=self.__elements[self.__front]
            self.__front+=1
            return data

    def display(self):
        for index in range(self.__front,self.__rear+1):
            print(self.__elements[index])

q=Queue(5)
q.enqueue("a")
q.enqueue("b")
print("initial queue")
q.display()
q.dequeue()
print("after dequeue")
q.display()

Write a python program to find and display the product of three positive integer values based on the rule mentioned below:

It should display the product of the three values except when one of the integer value is 7. In that case, 7 should not be included in the product and the values to its left also should not be included.
If there is only one value to be considered, display that value itself. If no values can be included in the product, display -1.

Note: Assume that if 7 is one of the positive integer values, then it will occur only once. Refer the sample I/O given below.
Sample Input	Expected Output
1, 5, 3	           15
3, 7, 8           	8
7, 4, 3	           12
1, 5, 7	           -1

def product(num1,num2,num3):
    l=[]
    l.extend([num1,num2,num3])
    product=1
    if 7 in l:
        i = l.index(7)
        if i is (len(l)-1):
            return -1
    else:
        i = -1
    for index in range(i+1,len(l)):
        product = product * l[index]        
    return product

prod=product(7,6,2)
print(prod)

